/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2021-05-12 01:55:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam_005fscript_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>문제1</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<select id=\"select1\">\r\n");
      out.write("\t\t<option value=\"\">시를 선택하세요.</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t\r\n");
      out.write("\t<select id=\"select2\">\r\n");
      out.write("\t\t<option value=\"\">구를 선택하세요.</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<input type=\"button\" id=\"btn\" value=\"확인\" />\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t/*\r\n");
      out.write("\t * 문제) 아래 데이터를 활용하여 페이지가 로딩되면 select1에는 시데이터를 option으로 선택할 수 있게 적용\r\n");
      out.write("\t * select1의 데이터가 변경되면 select2도 자동으로 해당시의 데이터만 보여지도록 적용\r\n");
      out.write("\t * 확인 버튼 클릭시 '당신의 주소는 대구 북구 입니다.' 형식으로 경고창(alert) 출력(선택된 데이터가 반영되도록)\r\n");
      out.write("\t * 시, 구를 선택하지 않고 확인버튼 클릭시 '주소를 선택해주세요' 경고창(alert) 출력\r\n");
      out.write("\t */\r\n");
      out.write("\t \r\n");
      out.write("\t//시 데이터\r\n");
      out.write("\tvar arr1 = new Array(\"서울\", \"대구\", \"대전\", \"부산\", \"인천\");\r\n");
      out.write("\t \r\n");
      out.write("\t //구 데이터\r\n");
      out.write("\tvar arr2 = new Array(\r\n");
      out.write("\t\tnew Array(\"서울구1\", \"서울구2\", \"서울구3\", \"서울구4\", \"서울구5\"),\r\n");
      out.write("\t\tnew Array(\"동구\", \"서구\", \"남구\", \"북구\", \"중구\", \"수성구\", \"달서구\"),\r\n");
      out.write("\t\tnew Array(\"대전구1\", \"대전구2\", \"대전구3\"),\r\n");
      out.write("\t\tnew Array(\"부산구1\", \"부산구2\", \"부산구3\", \"부산구4\"),\r\n");
      out.write("\t\tnew Array(\"인천구1\", \"인천구2\")\r\n");
      out.write("\t);\r\n");
      out.write("\t\r\n");
      out.write("\tvar flag = 0;\r\n");
      out.write("\t \r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\tfor(var i = 0; i < arr1.length; i++) {\r\n");
      out.write("\t\t\t$(\"#select1 option:eq(0)\").after(\"<option value=''>\" + arr1[i] + \"</option>\")\r\n");
      out.write("\t\t}\t\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#select1\").change(function() {\r\n");
      out.write("\t\t$('#select2').children('option:not(:first)').remove();\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[0][i] + \"</option>\")\n");
      out.write("\t\tswitch ($(\"#select1 option:selected\").text()) {\r\n");
      out.write("\t\t\tcase \"서울\":\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < arr2[0].length; i++) {\r\n");
      out.write("\t\t\t\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[0][i] + \"</option>\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('#select2').children('option:last').remove();\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"대구\":\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < arr2[1].length; i++) {\r\n");
      out.write("\t\t\t\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[1][i] + \"</option>\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('#select2').children('option:last').remove();\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"대전\":\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < arr2[2].length; i++) {\r\n");
      out.write("\t\t\t\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[2][i] + \"</option>\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('#select2').children('option:last').remove();\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"부산\":\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < arr2[3].length; i++) {\r\n");
      out.write("\t\t\t\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[3][i] + \"</option>\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('#select2').children('option:last').remove();\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"인천\":\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < arr2[4].length; i++) {\r\n");
      out.write("\t\t\t\t\tconsole.log(arr2[4][i]);\r\n");
      out.write("\t\t\t\t\t$(\"#select2 option:eq(0)\").after(\"<option value=''>\" + arr2[4][i] + \"</option>\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('#select2').children('option:last').remove();\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tdefault:\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tconsole.log(1);\r\n");
      out.write("\t\t}\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#btn\").bind(\"click\", function() {\r\n");
      out.write("\t\tconsole.log($(\"#select1 option:selected\").text());\r\n");
      out.write("\t\tif($(\"#select1 option:selected\").text() == \"시를 선택하세요.\" || $(\"#select2 option:selected\").text() == \"구를 선택하세요.\") {\r\n");
      out.write("\t\t\talert(\"주소를 선택해주세요.\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\talert(\"당신의 주소는 \" + $(\"#select1 option:selected\").text() + \" \" + $(\"#select2 option:selected\").text() + \" 입니다.\");\r\n");
      out.write("\t\t}\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
