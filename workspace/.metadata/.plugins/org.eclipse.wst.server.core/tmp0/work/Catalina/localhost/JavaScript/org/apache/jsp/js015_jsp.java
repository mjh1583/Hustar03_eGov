/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2021-05-07 08:46:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class js015_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>계산기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"4\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"monitor\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"7\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"8\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"9\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"+\" class=\"btn\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"4\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"5\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"6\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"-\" class=\"btn\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"1\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"2\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"3\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"*\" class=\"btn\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"0\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"C\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"=\" class=\"btn\"></td>\r\n");
      out.write("\t\t\t<td><input type=\"button\" value=\"/\" class=\"btn\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t\t예제) 계산기를 만들어보세요.\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\tvar nums = new Array(); //숫자를 담을 배열\r\n");
      out.write("\t\tvar contents = \"\";  //숫자를 담은 배열 nums를 하나의 매끄러운 문장으로 바꿔서 담은 문자열\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t$(document).ready(function() {\r\n");
      out.write("\t\t\t\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\".btn\").bind(\"click\", function() {\r\n");
      out.write("\t\t\tvar input = $(this).val();  //클릭한 버튼의 value를 가져와서 저장\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(input == \"C\") {  //C를 클릭하면 배열을 모두 비워버림\r\n");
      out.write("\t\t\t\tnums = [];\r\n");
      out.write("\t\t\t\tcontents = \"\";\r\n");
      out.write("\t\t\t\t$(\"#monitor\").val(nums);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse if(input == \"=\") { //contents에 담긴 값들을 모두 계산하여 monitor에 출력\r\n");
      out.write("\t\t\t\tcontents = toSting(nums);\r\n");
      out.write("\t\t\t\tnums = [];\r\n");
      out.write("\t\t\t\t$(\"#monitor\").val(eval(contents));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse { //C와 =을 제외한 모든 버튼의 값들을 배열에 추가\r\n");
      out.write("\t\t\t\tvar before = nums[nums.length - 1];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\tif(input == \"+\" || input == \"-\" || input == \"*\" || input == \"/\") { //연산자가 두번 연속으로 올 수는 없음\r\n");
      out.write("\t\t\t\t\tif(before == \"+\" || before == \"-\" || before == \"*\" || before == \"/\") {\r\n");
      out.write("\t\t\t\t\t\talert(\"연산자는 연속으로 입력할 수 없습니다.\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse if(nums.length == 0) {\r\n");
      out.write("\t\t\t\t\t\talert(\"처음에 연산자를 입력할 수 없습니다.\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\tshow(input);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\tshow(input);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction toSting(nums) {\r\n");
      out.write("\t\t\tvar sentence = \"\" \r\n");
      out.write("\t\t\tnums.forEach(function(item, index, array) {\r\n");
      out.write("\t\t\t\tsentence += item;\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treturn sentence;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction show(input) {\r\n");
      out.write("\t\t\tnums.push(input);\r\n");
      out.write("\t\t\tcontents = toSting(nums);\r\n");
      out.write("\t\t\t$(\"#monitor\").val(contents);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
